= Grep =

List all draft articles
grep -rwlIi . -e 'status: draft'
  . - search this dir
  r - recursive
  w - the expression is searched for as if its a word, not a regex
  l - only the names of files that match. Stops searching a file once a match is found (once)
  i - ignore case
  I - ignore binary files
  e - after this is the patter


A list of files and their line numbers which contain text: 
	grep -rwi . -e 'draft'

A list of files which contain certain text:
	grep -rwliI . -e 'Title: thoughts'

-I = ignore binary files. Much faster.


Search for a file and open it in vim:
	vi $(grep -rwlI . -e 'Title: thoughts')



Assign output to a variable:
a = $(pwd)

Open a file that grep finds


Remove a file
	rm name
 
Remove and force it without warnings
	rm -f name

Simple:
grep -r 'text goes here' path_goes_here

Complete:
grep -rnw '/path/to/somewhere/' -e 'pattern'

* -r or -R is recursive, (recursive through files also)
* -n is line number, and
* -w stands for match the whole word.
* -l (lower-case L) can be added to just give the file name of matching files.

Along with these, --exclude, --include, --exclude-dir flags could be used for efficient searching:

* This will only search through those files which have .c or .h extensions: grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e "pattern"
* This will exclude searching all the files ending with .o extension: grep --exclude=*.o -rnw '/path/to/somewhere/' -e "pattern"
* For directories it's possible to exclude a particular directory(ies) through --exclude-dirparameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/: grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e "pattern" 
This works very well for me, to achieve almost the same purpose like yours.
For more options check man grep.
