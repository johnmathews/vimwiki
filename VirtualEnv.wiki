=PyEnv and VirtualEnv=

<br>
    # `rmvirtualenv <name>`
    # `mkvirtualenv <name>`
    # `pyenv virtualwrapper_lazy`
    # (optional) `pyenv shell <python version to use>`
     
    * To use pyenv and virtualenvwrapper, see https://alysivji.github.io/setting-up-pyenv-virtualenvwrapper.html
    * Anytime you install a new version of python, you need to install virtualenvwrapper using `pyenv virtualenvwrapper_lazy`
    * `pyenv-virtualenvwrapper` uses the same commands as virtualenvwrapper

    * if you cant find mysql module, you probs need to reinstall pyenv cos it doesnt always build correctly
        * `CFLAGS="-I$(xcrun --show-sdk-path)/usr/include" pyenv install 3.7.0`
        * https://stackoverflow.com/questions/53128111/cant-find-sqlite3-module-when-import-it-using-python-which-installed-by-pyen

    === update pyenv and get a new python version ===
   * `brew upgrade pyenv` 
   * `pyenv install -l` - list versions
   * `pyenv install <version>` - install a new version
   * `pyenv uninstall <version>`
   (https://www.tecmint.com/pyenv-install-and-manage-multiple-python-versions-in-linux/)

    ==== install the right kernel for jupyter notebook ====
    * https://stackoverflow.com/questions/46270435/changing-python-executable
    * `pip install ipython`
    * `python -m pip install ipykernel`
    * `python -m ipykernel install --user --name Python3.7 --display-name "Python 3.7"`
<br>

|-------------------------------------------------------------------|----------------------------------------------|
| *Command*                                                         | *Description*                                |
|-------------------------------------------------------------------|----------------------------------------------|
| `pyenv versions`                                                  | *list* all installed python versions         |
| `pyenv uninstall <version>`                                       | *uninstall* a python version from pyenv      |
| `pyenv shell <version name>`                                      | set python *version* for this virtualenv     |
| `/Users/john/.virtualenvs/[name]/bin/activate`                    | Run commands when activating the env         |
| `mkvirtualenv env1`                                               | *Create* a virtualenv                        |
| `mkvirtualenv -a <project-dir> -r <requirements-path> <env-name>` | *create a virtualenv and link it to a dir    |
| `mkvirtualenv demo --python=python3`                              | *Create* a virtualenv with python3           |
| `deactivate`                                                      | *Close* the virtualenv                       |
| `workon env1`                                                     | *Activate* the virtualenv                    |
| `lsvirtualenv`                                                    | *List* environments                          |
| `rmvirtualenv ENVNAME` or `rm -rf ~/Envs/env1`                    | *Delete* an environment                      |
| `cpvirtualenv ENVNAME [TARGETENVNAME]`                            | *Copy* an environment                        |
| `showvirtualenv` [env]                                            | *Show* the details for a single virtualenv.  |
| `rmvirtualenv ENVNAME`                                            | *Remove* an environment, in the WORKON_HOME. |
| `cpvirtualenv oldenv newenv` then  `rmvirtualenv oldenv`          | *Rename* a virtualenv                        |
| `lsvirtualenv [-b] [-l] [-h]`                                     | *List* all of the environments.              |




=== Notes ===
To set up, run this script (automatically) when shell opens 
`source /usr/local/bin/virtualenvwrapper.sh`
