=Rhy’s Git tutorial=

*Snapshot*
    * Represents the state of the project at a given point in time.
    * Add files to the snapshot when they are ready to be committed. 
    * Adding/removing files to the snapshot is called staging/upstaging 

*Staging*
    * Lets you group related changes into distinct snapshots. 
    * This lets you track meaningful progression of a project, not just “all the changes”. 
    * Once you’ve staged a snapshot, by using “git add xxxx”,  you need to commit it to the project history

*git reset* and *git clean* 
    * operate on the working directory, and make permanent changes.
    * They don’t operate on the committed snapshots. 
    * _Git revert_ is much safer because it does operate on the committed snapshots. 

Most git commands operate on one of the three main git areas:
1. The working directory
2. The current staged snapshot
3. The committed snapshots 

Detached head  - the working directory does not represent the most recent commit. 

| Command                   | Description                                                                                               |
|---------------------------|-----------------------------------------------------------------------------------------------------------|
| `git checkout  “hash”   ` | go backwards. You need to specify the commit hash.                                                        |
| `git checkout “branch” -` | switch to a previously created branch                                                                     |
| `git tag -a v1.0 -m “x” ` | create annotated tag, which you can then refer to when checking out.                                      |
| `git revert xxxx        ` | deletes the changes made in the commit with the specified hash.                                           |
| `git reset              ` | upstages files. Only operates on the working directory and the staging area. Does not effect the git log. |
| `git reset —hard        ` | changes all tracked files to match the most recent commit . Will not effect untracked files.              |
| `git clean -f           ` | removes all untracked files                                                                               |

<br>

*Creating and switching to a new branch*
1. git checkout -b name
or
1. git branch <branch>
2. git checkout <branch>

*Delete a branch*
1. Git branch -d <name> 

*Rebase*
    * Move a branch around by changing the commit that the branch is based on. It changes the branches parent commit.
    * Rebase works on the branch that is currently “checked out”.
    * Rebase will move the base of the currently checked out branch to the head/tip of the branch that is specified.
